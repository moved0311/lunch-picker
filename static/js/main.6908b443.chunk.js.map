{"version":3,"sources":["Launch-picker.js","App.js","serviceWorker.js","index.js"],"names":["LaunchPicker","useState","lunch","setLunch","len","split","length","useEffect","fetch","then","res","text","data","value","options","lineNumbers","mode","styleSelectedText","onChange","editor","Button","variant","id","onClick","e","rowHeight","$","height","randNumOfDataLen","Math","floor","random","console","log","offset","css","map","row","idx","className","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sTASe,SAASA,IAAgB,IAAD,EACXC,mBAAS,yCADE,mBAC9BC,EAD8B,KACvBC,EADuB,KAEjCC,EAAMF,EAAMG,MAAM,MAAMC,OAqB5B,OAnBAC,qBAAU,WACRC,MACE,uFAECC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJT,EAASS,QAEZ,IAUD,6BACE,kBAAC,eAAD,CACEC,MAAOX,EACPY,QAAS,CACPC,aAAa,EACbC,KAAM,WACNC,mBAAmB,GAErBC,SAAU,SAACC,EAAQP,EAAMC,GACvBV,EAASU,MAGb,kBAACO,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,GAAG,MAAMC,QApB/C,SAAqBC,GACnB,IAAIC,EAAYC,IAAE,QAAQC,SACtBC,EAAmBC,KAAKC,MAAMD,KAAKE,SAAW3B,GAClD4B,QAAQC,IAAIL,EAAmB,GAC/B,IAAIM,GAAUT,EAAYG,EAC1BF,IAAE,QAAQS,IAAI,MAAOD,KAenB,QAGA,yBAAKZ,GAAG,aACN,yBAAKA,GAAG,aACPpB,EAAMG,MAAM,MAAM+B,KAAI,SAACC,EAAKC,GAAN,OACrB,uBAAGC,UAAU,MAAMC,IAAKF,GACrBD,QC1CEI,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAACvC,EAAD,QCOc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.6908b443.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"./lunch-LaunchPicker.css\";\nimport $ from \"jquery\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button } from \"react-bootstrap\";\n\nexport default function LaunchPicker() {\n  const [lunch, setLunch] = useState(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\");\n  let len = lunch.split(\"\\n\").length;\n  //get default data from github raw data.\n  useEffect(() => {\n    fetch(\n      \"https://raw.githubusercontent.com/moved0311/lunch-picker/master/public/lunch_unique\"\n    )\n      .then(res => {\n        return res.text();\n      })\n      .then(data => {\n        setLunch(data);\n      });\n  }, []);\n\n  function handleClick(e) {\n    let rowHeight = $(\".row\").height();\n    let randNumOfDataLen = Math.floor(Math.random() * len);\n    console.log(randNumOfDataLen + 1);\n    let offset = -rowHeight * randNumOfDataLen;\n    $(\".row\").css(\"top\", offset);\n  }\n  return (\n    <div>\n      <CodeMirror\n        value={lunch}\n        options={{\n          lineNumbers: true,\n          mode: \"text/css\",\n          styleSelectedText: true\n        }}\n        onChange={(editor, data, value) => {\n          setLunch(value);\n        }}\n      />\n      <Button variant=\"outline-primary\" id=\"btn\" onClick={handleClick}>\n        Draw\n      </Button>\n      <div id=\"container\">\n        <div id=\"selected\"></div>\n        {lunch.split(\"\\n\").map((row, idx) => (\n          <p className=\"row\" key={idx}>\n            {row}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport LaunchPicker from \"./Launch-picker\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LaunchPicker></LaunchPicker>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}